using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ReportGenerator
{
    class QuarterlyIncomeReport
    {
        static void Main(string[] args)
        {
            // create a new instance of the class
            QuarterlyIncomeReport report = new QuarterlyIncomeReport();

            // call the GenerateSalesData method
            SalesData[] salesData = report.GenerateSalesData();
            
            // call the QuarterlySalesReport method
            report.QuarterlySalesReport(salesData);
        }

        /* public struct SalesData includes the following fields: date sold, department name, product ID, quantity sold, unit price */
        public struct SalesData
        {
            public DateOnly dateSold;
            public string departmentName;
            public string productID;
            public int quantitySold;
            public double unitPrice;
            public double baseCost;
            public int volumeDiscount;
        }

        public struct ProdDepartments
        {
            public static string[] DepartmentNames = { 
                "Men's Clothing", 
                "Women's Clothing", 
                "Children's Clothing", 
                "Accessories", 
                "Footwear", 
                "Outerwear", 
                "Sportswear", 
                "Undergarments" 
            };

            public static string[] DepartmentAbbreviations = { 
                "MENS", 
                "WOMN", 
                "CHLD", 
                "ACCS", 
                "FOOT", 
                "OUTR", 
                "SPRT", 
                "UNDR" };
        }

        public struct ManufacturingSites
        {
            public static string[] ManSites = {
            "US1", "US2", "US3",
            "UK1", "UK2", "UK3",
            "JP1", "JP2", "JP3", "CA1"
            };
        }

        /* the GenerateSalesData method returns 1000 SalesData records. It assigns random values to each field of the data structure */
        public SalesData[] GenerateSalesData()
        {
            SalesData[] salesData = new SalesData[1000];
            Random random = new Random();

            for (int i = 0; i < 1000; i++)
            {
                salesData[i].dateSold = new DateOnly(2023, random.Next(1, 13), random.Next(1, 29));
                salesData[i].departmentName = ProdDepartments.DepartmentNames[random.Next(ProdDepartments.DepartmentNames.Length)];

                int indexOfDept = Array.IndexOf(ProdDepartments.DepartmentNames, salesData[i].departmentName);

                string deptAbb = ProdDepartments.DepartmentAbbreviations[indexOfDept];
                string firstDigit = (indexOfDept + 1).ToString();
                string nextTwoDigits = random.Next(1, 100).ToString("D2");
                string[] sizes = { "XS", "S", "M", "L", "XL" };
                string sizeCode = sizes[random.Next(sizes.Length)];
                string[] colors = { "BK", "BL", "GR", "RD", "YL", "OR", "WT", "GY" };
                string colorCode = colors[random.Next(colors.Length)];
                string manufacturingSite = ManufacturingSites.ManSites[random.Next(ManufacturingSites.ManSites.Length)];

                salesData[i].productID = $"{deptAbb}-{firstDigit}-{nextTwoDigits}-{sizeCode}-{colorCode}-{manufacturingSite}";
                salesData[i].quantitySold = random.Next(1, 101);
                salesData[i].unitPrice = random.Next(25, 300) + random.NextDouble();
                salesData[i].baseCost = salesData[i].unitPrice * (1 - random.Next(5, 21) / 100.0);
                salesData[i].baseCost = random.Next(10, 100) + random.NextDouble();
                salesData[i].volumeDiscount = (int)(salesData[i].quantitySold * 0.1);

            }

            return salesData;
        }



public void QuarterlySalesReport(SalesData[] salesData)
        {
            // create dictionaries to store the quarterly sales data and profit data  
            Dictionary<string, double> quarterlySales = new Dictionary<string, double>();
            Dictionary<string, double> quarterlyProfit = new Dictionary<string, double>();
            Dictionary<string, Dictionary<string, double>> departmentSales = new Dictionary<string, Dictionary<string, double>>();
            Dictionary<string, Dictionary<string, double>> departmentProfit = new Dictionary<string, Dictionary<string, double>>();
            Dictionary<string, List<SalesData>> topSalesOrders = new Dictionary<string, List<SalesData>>();

            // iterate through the sales data  
            foreach (SalesData data in salesData)
            {
                // calculate the total sales and profit for each quarter  
                string quarter = GetQuarter(data.dateSold.Month);
                double totalSales = data.quantitySold * data.unitPrice;
                double totalProfit = totalSales - (data.baseCost * data.quantitySold) - data.volumeDiscount;

                if (quarterlySales.ContainsKey(quarter))
                {
                    quarterlySales[quarter] += totalSales;
                    quarterlyProfit[quarter] += totalProfit;
                }
                else
                {
                    quarterlySales.Add(quarter, totalSales);
                    quarterlyProfit.Add(quarter, totalProfit);
                }

                if (!departmentSales.ContainsKey(quarter))
                {
                    departmentSales[quarter] = new Dictionary<string, double>();
                    departmentProfit[quarter] = new Dictionary<string, double>();
                }

                if (departmentSales[quarter].ContainsKey(data.departmentName))
                {
                    departmentSales[quarter][data.departmentName] += totalSales;
                    departmentProfit[quarter][data.departmentName] += totalProfit;
                }
                else
                {
                    departmentSales[quarter].Add(data.departmentName, totalSales);
                    departmentProfit[quarter].Add(data.departmentName, totalProfit);
                }

                if (!topSalesOrders.ContainsKey(quarter))
                {
                    topSalesOrders[quarter] = new List<SalesData>();
                }

                topSalesOrders[quarter].Add(data);
            }

            // display the quarterly sales report in tables  
            Console.WriteLine("Quarterly Sales Report");
            Console.WriteLine("----------------------");
            foreach (string quarter in new[] { "Q1", "Q2", "Q3", "Q4" })
            {
                if (quarterlySales.ContainsKey(quarter))
                {
                    double sales = quarterlySales[quarter];
                    double profit = quarterlyProfit[quarter];
                    double profitPercentage = (profit / sales) * 100;
                    Console.WriteLine("{0}:", quarter);
                    Console.WriteLine("Sales: {0:C}, Profit: {1:C}, Profit Percentage: {2:F2}%", sales, profit, profitPercentage);

                    Console.WriteLine("  Department Breakdown:");
                    Console.WriteLine("  ╔════════════════════════════╦═════════════╦═════════════╦══════════════════╗");
                    Console.WriteLine("  ║    Department Name         ║     Sales   ║    Profit   ║ Profit Percentage║");
                    Console.WriteLine("  ╠════════════════════════════╬═════════════╬═════════════╬══════════════════╣");
                    foreach (var department in departmentSales[quarter])
                    {
                        double deptSales = department.Value;
                        double deptProfit = departmentProfit[quarter][department.Key];
                        double deptProfitPercentage = (deptProfit / deptSales) * 100;
                        Console.WriteLine("  ║ {0,-26} ║{1,10:C}║{2,10:C}║{3,17:F2}%║", department.Key, deptSales, deptProfit, deptProfitPercentage);
                    }
                    Console.WriteLine("  ╚════════════════════════════╩═════════════╩═════════════╩══════════════════╝");

                    // Display top 3 sales orders in descending order of profit  
                    var top3Orders = topSalesOrders[quarter].OrderByDescending(o => (o.quantitySold * o.unitPrice) - (o.baseCost * o.quantitySold) - o.volumeDiscount).Take(3).ToList();
                    Console.WriteLine("  Top 3 Sales Orders:");
                    Console.WriteLine("  ╔════════════════════════════════════╦════════════════╦════════════════╦════════════════╦════════════════╦════════════════════╗");
                    Console.WriteLine("  ║    Product ID                      ║ Quantity Sold  ║ Unit Price     ║ Total Sales    ║    Profit      ║ Profit Percentage  ║");
                    Console.WriteLine("  ╠════════════════════════════════════╬════════════════╬════════════════╬════════════════╬════════════════╬════════════════════╣");
                    foreach (var order in top3Orders)
                    {
                        double orderTotalSales = order.quantitySold * order.unitPrice;
                        double orderProfit = orderTotalSales - (order.baseCost * order.quantitySold) - order.volumeDiscount;
                        double orderProfitPercentage = (orderProfit / orderTotalSales) * 100;
                        Console.WriteLine("  ║ {0,-34} ║ {1,14} ║ {2,14:C} ║ {3,14:C} ║ {4,14:C} ║ {5,18:F2}%║", order.productID, order.quantitySold, order.unitPrice, orderTotalSales, orderProfit, orderProfitPercentage);
                    }
                    Console.WriteLine("  ╚════════════════════════════════════╩════════════════╩════════════════╩════════════════╩════════════════╩════════════════════╝");
                }
                else
                {
                    Console.WriteLine("{0}: Sales: {1:C}, Profit: {2:C}, Profit Percentage: {3:F2}%", quarter, 0, 0, 0);
                }
            }
        }

        public string GetQuarter(int month)
        {
            if (month >= 1 && month <= 3)
            {
                return "Q1";
            }
            else if (month >= 4 && month <= 6)
            {
                return "Q2";
            }
            else if (month >= 7 && month <= 9)
            {
                return "Q3";
            }
            else
            {
                return "Q4";
            }
        }
    }
    
}
